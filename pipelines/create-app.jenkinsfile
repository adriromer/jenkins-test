pipeline {
        agent any
        options {
            skipDefaultCheckout()
            disableConcurrentBuilds()
            timeout(5)
            buildDiscarder(logRotator(numToKeepStr: '5'))
            
        }
        environment {      
            DST_CLUSTER_URL_DEV = "insecure://ocp-dev.bancogalicia.com.ar"
            DST_CLUSTER_TOKEN_DEV = credentials("cross-project-dev-token")
            GIT_CRED="GitHubPusher"
        }
        stages { 
            stage("Global infomation Input") {
                steps {
                    script {   
                        library changelog: false, identifier: 'galicia@master', retriever: modernSCM([$class: 'GitSCMSource', credentialsId: "${GIT_CRED}", remote: 'https://github.com/adriromer/jenkins-test', traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'], [$class: 'CleanAfterCheckoutTrait']]])

                        // input datos
                        def userInput = input(
                            id: 'userInput', message: 'Global infomation for new application Input: ', parameters: [
			                [$class: 'StringParameterDefinition', description: 'URL Git Repository: ', defaultValue: "Git url", name: 'GITURL'],
			                [$class:'ChoiceParameterDefinition', description: 'Select Tecnology: ', choices: "Java\nPython\nReact\nNodejs\nNetcore\n", name: 'TECNO'],
                            [$class:'ChoiceParameterDefinition', description: 'Select Veracode APP if known: ', choices: "Ninguno\nycrm-cheques-int\nyerm-journeyvincuemp-int\nBackEnd-Minorista\nBackEnd-Mayorista\nyprm-paquetes-int\nyece-creditoempresas-int\ngres-grecosystem-int\nSecopa\nApp ONB (A)\nApp ONB (iOS)\nApp OFB (A)\nApp OFB (iOS)", name: 'VERACODE'],
                            [$class: 'StringParameterDefinition', description: 'WebHook Teams if known: ', defaultValue: "url hook teams", name: 'HOOK']
                        ])
                        env.GITURL= userInput ['GITURL']
				        env.HOOKTEAMS= userInput ['HOOK']
    				    env.VERACODE_ID= userInput ['VERACODE']
    				    env.TECH= userInput ['TECNO']
			      	    // show user input //
			            Messages("User input:","title")
			            Messages("GIT URL: ${GITURL}","info")
			            Messages("HOOK TEAMS: ${HOOKTEAMS}","info")
			            Messages("VERACODE ID: ${VERACODE_ID}","info")
			            Messages("TECNOLOGY: ${TECH}","info")
			      	    Messages("Some other parameters may be requestede depending your selection","title")
			            // start selection //
                    }
                }
            }
            stage("Application creation Preparation") {
                steps {
                    script {  
                        CreatePrepareages("${TECH}")
                        //funcion Parser parsea url
                        def ObjDatos=Parser("${env.GITURL}")
                        env.DEVOPS=ObjDatos[2] // url de la config
                        env.PROYECTO=ObjDatos[0] //nombre del proyecto
                        env.APP_NAME=ObjDatos[1] //asigno nombre de la app 
                    } 
                }    
            }  
            stage("Create App DEV"){
                  steps{
                      script{
                                galCreate("${DST_CLUSTER_URL_DEV}","${DST_CLUSTER_TOKEN_DEV}","${PROYECTO}-dev","${APP_NAME}","dev","${IS}","${GITURL}","master","${LANGUAGE}","${TOOL}","${HOOKTEAMS}","${VERACODE_ID}")
                            }
		                }
                }
          }
          post {
                 always {
                     Messages("Run completed","info")
                     Messages("Cleaning Workspace","info")    
                     
                
                         }
                  success { 
                      Messages("Successfully!","info")
                    // galBackupALL()
                          }
                  failure {
                      Messages("Failed!","error")
                          }
                 }
  }